@import "./bem";
@import "./border";
@import './gradient';
@import './rotate';
@import './transition';
@import './transform';
@import './animation';
@import './clearfix';
@import './shadow';
@import './userSelect';
@import './flex';
@import './link';
@import './responsive';

@mixin colorBg($type, $color: false) {
  @if ($type == primary) {
    @if ($color) {
      color:            $ColorPrimary;
    } @else {
      background-color: $ColorPrimary;
      border:           $BorderWidth solid $ColorPrimary;
      color:            $ColorWhite;
    }
  } @else if ($type == secondary) {
    @if ($color) {
      color:            $ColorSecondary;
    } @else {
      background-color: $ColorSecondary;
      color:            $ColorDark;
      border:           $BorderWidth solid $ColorSecondary;
    }
  } @else if ($type == success) {
    @if ($color) {
      color:            $ColorSuccess;
    } @else {
      color:            $ColorWhite;
      background-color: $ColorSuccess;
      border:           $BorderWidth solid $ColorSuccess;
    }
  } @else if ($type == danger) {
    @if ($color) {
      color:            $ColorDanger;
    } @else {
      color:            $ColorWhite;
      background-color: $ColorDanger;
      border:           1px solid $ColorDanger;
    }
  } @else if ($type == info) {
    @if ($color) {
      color:            $ColorInfo;
    } @else {
      background-color: $ColorInfo;
      border:           $BorderWidth solid $ColorInfo;
      color:            $ColorWhite;
    }
  } @else if ($type == warning) {
    @if ($color) {
      color:            $ColorWarning;
    } @else {
      color:            $ColorDark;
      background-color: $ColorWarning;
      border:           1px solid $ColorWarning;
    }
  } @else if ($type == white) {
    @if ($color) {
      color:            $ColorWhite;
    } @else {
      color:            $ColorDark;
      background-color: $ColorWhite;
    }
  } @else if ($type == info-hover) {
    @if ($color) {
      color:            $ColorInfoHover;
    } @else {
      background-color: $ColorInfoHover;
      border:           $BorderWidth solid $ColorInfoHover;
      color:            $ColorWhite;
    }
  } @else if ($type == warning-hover) {
    @if ($color) {
      color:            $ColorWarning;
    } @else {
      color:            $ColorDark;
      background-color: $ColorWarning;
      border:           1px solid $ColorWarning;
    }
  } @else if ($type == danger-hover) {
    @if ($color) {
      color:            $ColorDangerHover;
    } @else {
      color:            $ColorWhite;
      background-color: $ColorDangerHover;
      border:           1px solid $ColorDangerHover;
    }
  } @else if ($type == primary-hover) {
    @if ($color) {
      color:            $ColorPrimaryHover;
    } @else {
      background-color: $ColorPrimaryHover;
      color:            $ColorWhite;
      border-color:     $ColorPrimaryHover;
    }
  } @else if ($type == success-hover) {
    @if ($color) {
      color:            $ColorSuccessHover;
    } @else {
      background-color: $ColorSuccessHover;
      color:            $ColorWhite;
      border-color:     $ColorSuccessHover;
    }
  } @else if ($type == secondary-hover) {
    @if ($color) {
      color:            $ColorSecondaryHover;
    } @else {
      background-color: $ColorSecondaryHover;
      color:            $ColorWhite;
      border-color:     $ColorSecondaryHover;
    }
  }
}

@mixin radius($radio: $BorderRadius) {
  -moz-border-radius:    $radio;
  -webkit-border-radius: $radio;
  border-radius:         $radio;
}

@mixin padding($padding: $Padding) {
  padding: 6px 14px;
}

@mixin transition($transition: $Transition) {
  -webkit-transition: $transition;
  -moz-transition:    $transition;
  -ms-transition:     $transition;
  -o-transition:      $transition;
  transition:         $transition;
}

@mixin userNoSelect() {
  -ms-user-select:     none;
  user-select:         none;
  -moz-user-select:    none;
  -webkit-user-select: none;
}

@mixin hover() {
  &:hover {
    @content;
  }
}

@mixin focus() {
  &:focus {
    z-index: 1;
    outline: 0 none;
    @include transition(box-shadow .3s);
    @include shadow(inset 0 0 0 0.2em #00c4e8);
  }
}

@mixin shadow($attr...) {
  -webkit-box-shadow: $attr;
  -moz-box-shadow:    $attr;
  box-shadow:         $attr;
}

@mixin raised {
  @include shadow($ShadowRaised);
}

@mixin rounded() {
  @include radius($Rounded);
}

@mixin generateBgColors($color:false) {
  //@include hover() {
  //  @include colorBg(primary-hover, $color);
  //}
  @include bem_modified(secondary) {
    @include colorBg(secondary, $color);
    @include hover() {
      @include colorBg(secondary-hover, $color);
    }
  }
  @include bem_modified(primary) {
    @include colorBg(primary, $color);
    @include hover() {
      @include colorBg(primary-hover, $color);
    }
  }
  @include bem_modified(success) {
    @include colorBg(success, $color);
    @include hover() {
      @include colorBg(success-hover, $color);
    }
  }
  @include bem_modified(info) {
    @include colorBg(info, $color);
    @include hover() {
      @include colorBg(info-hover, $color);
    }
  }
  @include bem_modified(danger) {
    @include colorBg(danger, $color);
    @include hover() {
      @include colorBg(danger-hover, $color);
    }
  }
  @include bem_modified(warning) {
    @include colorBg(warning, $color);
    @include hover() {
      @include colorBg(warning-hover, $color);
    }
  }
}

@mixin card() {
  @include shadow($Shadow);
  @include border-radius($BorderRadius);
  @include colorBg(white);
}

@mixin card-fluid() {
  @include shadow(none);
  @include border-radius($BorderRadiusFluid);
  @include colorBg(white);
}

@mixin title() {
  font-weight:   700;
  margin-bottom: .5em;
  font-size:     $FontSize-2;
}

@mixin subtitle() {
  @include title();
  opacity:   .7;
  font-size: $FontSize;
}

@mixin section-bg {
  background-color: #008fba;
  background-image: -webkit-gradient(linear, left top, right top, from(#008fba), to(#03c4e8));
  background-image: linear-gradient(90deg, #008fba, #03c4e8);
  filter:           progid:DXImageTransform.Microsoft.gradient(startColorStr="#008fba", endColorStr="#03c4e8", gradientType="1");
  color:            $ColorWhite;
}

@mixin form-control() {
  @include transition();
  min-height:       35px;
  display:          block;
  width:            100%;
  padding:          .375rem .75rem;
  font-weight:      400;
  line-height:      1.5;
  color:            #495057;
  background-color: #fff;
  background-clip:  padding-box;
  border-radius:    .25rem;
  border:           1px solid #E8E9E9;
  font-size:        14px;
  height:           35px;
  &:focus {
    color:            #495057;
    background-color: #fff;
    border-color:     #80bdff;
    outline:          0;
    @include shadow(0 0 0 0.2rem rgba(26, 80, 137, 0.25))
  }
}

@mixin generateSizes() {
  $types: xxs xs s sm m l xl xxl;
  $base-size: 5px;

  $modular-scale: 0.2;
  @each $type in $types {
    &--ftz-#{$type} {
      font-size: $base-size * $modular-scale;
      $modular-scale: $modular-scale + 1;
    }
  }
}

@mixin before() {
  &::before {
    @content;
  }
}

@mixin fontSize($size: $FontSize) {
  font-size: $size;
}

@mixin ScrollBar {
  // Firefox's scrollbar coloring cascades, but the sizing does not,
  // so it's being added to this mixin for allowing support wherever custom scrollbars are
  // sass-lint:disable-block no-misspelled-properties
  scrollbar-width: thin;

  // sass-lint:disable-block no-vendor-prefixes
  &::-webkit-scrollbar {
    width:  $ScrollBar;
    height: $ScrollBar;
  }

  &::-webkit-scrollbar-thumb {
    background-color: transparentize($ColorDarkShade, .5);
    border:           $ScrollBarCorner solid transparent;
    background-clip:  content-box;
  }

  &::-webkit-scrollbar-corner,
  &::-webkit-scrollbar-track {
    background-color: transparent;
  }
}

// Spit out rem and px

// Our base gridline is at 1/2 the font-size, ensure line-heights stay on that gridline.
// EX: A proper line-height for text is 1.5 times the font-size.
//     If our base font size (softFontSize) is 16, our baseline is 8 (16*1.5 / 3). To ensure the
//     text stays on the baseline, we pass a multiplier to calculate a line-height in rems.
@mixin lineHeightFromBaseline($multiplier: 3) {
  line-height: convertToRem(($FontSize/2)*$multiplier);
}


@mixin Font {
  font-family:              $FontFamily;
  font-weight:              $FontWeightRegular;
  letter-spacing:           -.005em;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust:     100%;
  font-kerning:             normal;
}

@mixin Text {
  color:       $TextColor;
  font-weight: $FontWeightRegular;
}


// Font sizing extends, using rem mixin

@mixin FontSizeXS {
  @include fontSize($FontSizeXS);
  line-height: $LineHeight;
}

@mixin FontSizeS {
  @include fontSize($FontSizeS);
  line-height: $LineHeight;
}

@mixin FontSize {
  @include fontSize($FontSize);
  line-height: $LineHeight;
}

@mixin FontSizeM {
  @include fontSize($FontSizeM);
  line-height: $LineHeight;
}

@mixin FontSizeL {
  @include fontSize($FontSizeL);
  line-height: $LineHeight;
}

@mixin FontSizeXL {
  @include fontSize($FontSizeXL);
  line-height:    1.25;
  font-weight:    $FontWeightLight; // always apply light weight to x-large type
  letter-spacing: -.05em;
}

@mixin FontSizeXXL {
  @include fontSize($FontSizeXXL);
  line-height:    1.25;
  font-weight:    $FontWeightLight; // always apply light weight to xx-large type
  letter-spacing: -.03em;
}

@mixin Title($size: 'm') {
  color: $TitleColor;

  @if $size == 'xxxs' {
    @include FontSizeXS;
    @include lineHeightFromBaseline(3);
    font-weight:    $FontWeightBold;
  } @else if $size == 'xxs' {
    @include FontSizeS;
    @include lineHeightFromBaseline(3);
    font-weight:    $FontWeightBold;
  } @else if $size == 'xs' {
    @include FontSize;
    @include lineHeightFromBaseline(3);
    font-weight:    $FontWeightSemiBold;
    letter-spacing: -.02em;
  } @else if $size == 's' {
    @include FontSizeL;
    @include lineHeightFromBaseline(4);
    font-weight:    $FontWeightMedium;
    letter-spacing: -.025em;
  } @else if $size == 'm' {
    @include FontSizeXL;
    @include lineHeightFromBaseline(5);
    letter-spacing: -.04em;
  } @else if $size == 'l' {
    @include FontSizeXXL;
    @include lineHeightFromBaseline(6);
  } @else {
    @include fontSize($size);
    @include lineHeightFromBaseline(3);
  }
}

@mixin truncate() {
  white-space:   nowrap;
  overflow:      hidden;
  text-overflow: ellipsis;
}

@mixin size($size) {
  width:  $size;
  height: $size;
}

@mixin TextTruncate {
  // sass-lint:disable-block no-important
  max-width:     100%; /* 1 */
  overflow:      hidden !important;
  text-overflow: ellipsis !important;
  white-space:   nowrap !important;
  word-wrap:     normal !important; /* 2 */
}
