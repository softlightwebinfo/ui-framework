@function FormControlGradient($color: $ColorPrimary) {
  @return linear-gradient(to top,
          $color,
          $color 2px,
          transparent 2px,
          transparent 100%
          );
}

/**
 * 2. Account for inner box-shadow style border when in group
 * 3. Must supply both values to background-size or some browsers apply the single value to both directions
 */

@mixin FormControlText {
  @include Font;
  font-size:   $FontSizeS;
  line-height: 1em; // fixes text alignment in IE
  color:       $TextColor;

  &::placeholder {
    color: $ColorDarkShade;
  }
}


@mixin FormControlSize(
  $height: $FormControlHeight,
  $includeAlternates: false
) {
  // Default
  max-width: $FormMaxWidth;
  width:     100%;
  height:    $height;

  @if ($includeAlternates) {
    &--fullWidth {
      max-width: 100%;
    }

    &--compressed {
      height: $FormControlCompressedHeight;
    }

    &--inGroup {
      height: $FormControlHeight - 2px; /* 2 */
    }

    &--inGroup#{&}--compressed {
      height: $FormControlCompressedHeight - 2px; /* 2 */
    }
  }
}

@mixin FormControlWithIcon($isIconOptional: false, $side: 'left') {
  @if ($isIconOptional) {
    @at-root {
      #{&}--withIcon {
        @include FormControlLayoutPadding(1, $side);
      }
    }
  } @else {
    @include FormControlLayoutPadding(1, $side);
  }
}

@mixin FormControlIsLoading($isNextToIcon: false) {
  @at-root {
    #{&}-isLoading {
      @if ($isNextToIcon) {
        @include FormControlLayoutPadding(2);
      } @else {
        @include FormControlLayoutPadding(1);
      }
    }
  }
}

@mixin FormControlDefaultShadow($borderOnly: false) {
  // sass-lint:disable-block indentation
  background-color:  $FormBackgroundColor;
  background-repeat: no-repeat;
  background-size:   0% 100%; /* 3 */

  @if ($borderOnly) {
    box-shadow: inset 0 0 0 1px $FormBorderColor;
  } @else {
    box-shadow: #{$FormControlBoxShadow},
                inset 0 0 0 1px $FormBorderColor;
  }

  transition:        box-shadow $AnimSpeedFast ease-in,
                     background-color $AnimSpeedFast ease-in,
                     background-image $AnimSpeedFast ease-in,
                     background-size $AnimSpeedFast ease-in;
}

@mixin FormControlCustomShadow() {
  background:         #e2e7ea;
  color:              #666f74;
  font-size:          16px;
  line-height:        25px;
  border:             1px solid #e2e7ea;
  -webkit-box-shadow: none;
  box-shadow:         none;
  outline:            0;
  width:              100%;
  font-weight:        500;
  letter-spacing:     .01em;
  border-radius:      3px;
  transition:         box-shadow $AnimSpeedFast ease-in,
                      background-color $AnimSpeedFast ease-in,
                      background-image $AnimSpeedFast ease-in,
                      background-size $AnimSpeedFast ease-in;
}

@mixin FormControlFocusStyle($borderOnly: false) {
  // sass-lint:disable-block indentation, empty-args
  background-color: tintOrShade($ColorEmptyShade, 0%, 40%);
  background-image: FormControlGradient();
  background-size:  100% 100%; /* 3 */

  @if ($borderOnly) {
    box-shadow: inset 0 0 0 1px transparentize($ColorFullShade, .84);
  } @else {
    box-shadow: 0 1px 1px -1px transparentize($ShadowColor, .8),
                0 4px 4px -2px transparentize($ShadowColor, .8),
                inset 0 0 0 1px transparentize($ColorFullShade, .84);
  }
}

@mixin FormControlInvalidStyle {
  background-image: FormControlGradient($ColorDanger);
  background-size:  100%;
}

@mixin FormControlDisabledStyle {
  cursor:     not-allowed;
  color:      $FormControlDisabledColor;
  background: $FormBackgroundDisabledColor;
  box-shadow: inset 0 0 0 1px $FormBorderDisabledColor;

  &::placeholder {
    color: $FormControlDisabledColor;
  }
}

@mixin FormControlReadOnlyStyle {
  cursor:       default;
  // Use transparency since there is no border and in case form is on a non-white background
  background:   transparentize(lightOrDarkTheme($ColorLightShade, #000), .88);
  border-color: transparent;
  box-shadow:   none;
}

// For using icons as background images (data-uri)
@mixin IconBackground($type, $color: $ColorEmptyShade) {
  // sass-lint:disable-block quotes
  @if variable-exists(type) == false {
    @error 'A $type:string must be provided to @mixin IconBackground().';
  } @else if type-of($color) != color {
    @warn "The second parameter must be a valid color type -- got $color:#{type-of($color)} = #{$color}.";
  } @else if $type == 'check' {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='10' height='8' viewBox='0 0 10 8'%3E%3Cpath d='M.375 2.625L3.375 5.625M3.375 5.625L8.625.375' fill='none' fill-rule='evenodd' stroke='#{hexToRGB($color)}' stroke-linecap='round' stroke-width='1.5' transform='translate(.5 1)'/%3E%3C/svg%3E");
  } @else if $type == 'dot' {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='6' height='6' viewBox='0 0 6 6'%3E%3Ccircle cx='8' cy='11' r='3' fill='#{hexToRGB($color)}' fill-rule='evenodd' transform='translate(-5 -8)'/%3E%3C/svg%3E");
  } @else if $type == 'square' {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='6' height='6' viewBox='0 0 6 6'%3E%3Crect width='6' height='6' fill='#{hexToRGB($color)}' fill-rule='evenodd'/%3E%3C/svg%3E");
  } @else {
    @error "The $type of #{$type} cannot be found.";
  }
}

/**
 * 4. Override invalid state with focus state.
 */

@mixin FormControlStyle($borderOnly: false, $includeStates: true, $includeSizes: true) {
  @include FormControlSize($includeAlternates: $includeSizes);
  @include FormControlCustomShadow;
  @include FormControlText;

  border:  none;
  padding: $FormControlPadding;

  @if ($includeSizes) {
    &--compressed {
      padding-top:    $FormControlCompressedPadding;
      padding-bottom: $FormControlCompressedPadding;
    }

    &--inGroup {
      // sass-lint:disable-block no-important
      box-shadow: none !important;
    }
  }

  @if ($includeStates) {
    &:invalid { /* 4 */
      @include FormControlInvalidStyle;
    }

    &:focus { /* 4 */
      @include FormControlFocusStyle;
    }

    &:disabled {
      @include FormControlDisabledStyle;
    }

    &[readOnly] {
      @include FormControlReadOnlyStyle;
    }
  }

}

// Custom styles and states for checkboxes and radios

@mixin CustomControl($type: null, $size: $Size) {
  @include SlightShadow;

  @if $size {
    $size: $size - 2px; // subtract 2px from size to account for border size
    padding: ($size / 2) + 1px;
  }

  border:     1px solid shadeOrTint($ColorLightestShade, 18%, 30%);
  background: $ColorEmptyShade no-repeat center;

  @if $type == 'round' {
    border-radius: $size;
  } @else if $type == 'square' {
    border-radius: $BorderRadius;
  }
  // sass-lint:disable-block indentation
  transition: background-color $AnimSpeedFast ease-in,
              border-color $AnimSpeedFast ease-in;
}

@mixin CustomControlSelected($type: null) {
  border-color:     $ColorPrimary;
  background-color: $ColorPrimary;

  @if $type != null {
    @include IconBackground($type, $ColorEmptyShade);
  }
}

@mixin CustomControlDisabled($type: null) {
  border-color:     $ColorLightShade;
  background-color: $ColorLightShade;
  box-shadow:       none;
  @if $type != null {
    @include IconBackground($type, $FormCustomControlDisabledIconColor);
  }
}

@mixin CustomControlFocused {
  @include FocusRing;
  border-color: $ColorPrimary;
}


// Deprecated mixins below. This was changed in Nov. 2018

@mixin CustomControl--selected($type: null) { // sass-lint:disable-line mixin-name-format
  @include CustomControlSelected($type);
  @warn '@mixin CustomControl--selected is deprecated, please use CustomControlSelected instead';
}

@mixin CustomControl--disabled($type: null) { // sass-lint:disable-line mixin-name-format
  @include CustomControlDisabled($type);
  @warn '@mixin CustomControl--disabled is deprecated, please use CustomControlDisabled instead';
}

@mixin CustomControl--focused { // sass-lint:disable-line mixin-name-format
  @include CustomControlFocused;
  @warn '@mixin CustomControl--focused is deprecated, please use CustomControlFocused instead';
}

// Hiding elements offscreen to only be read by screen reader
@mixin ScreenReaderOnly {
  position: absolute;
  left:     -10000px;
  top:      auto;
  width:    1px;
  height:   1px;
  overflow: hidden;
}

