// Because of the animations and positioning involved, this code gets pretty
// repetitive. What you generally need to know if you work in here is that
// the positioning of the popovers (and the arrows attached to them)
// is handled through absolute positioning and then animated through the use
// of transforms.

.c-popover {
  display:        inline-block;
  position:       relative;
  vertical-align: middle;
  max-width:      100%;
}

.c-popover__anchor {
  display: inline-block;
}

/**
 * 1. Can expand further, but it looks weird if it's smaller than the originating button.
 * 2. Animation happens on the panel.
 * 3. Make sure the panel stays within the window.
 */
.c-popover__panel {
  // Ignore linting for legibility of transition property, and the mixin performs an overwrite
  // sass-lint:disable-block indentation, mixins-before-declarations
  position:            absolute;
  z-index:             $ZContentMenu;
  min-width:           $ButtonMinWidth; /* 1 */
  max-width:           calc(100vw - #{$SizeXL}); /* 3 */
  backface-visibility: hidden;
  pointer-events:      none;
  transition: /* 2 */
                       opacity $AnimSlightBounce $AnimSpeedSlow,
                       visibility $AnimSlightBounce $AnimSpeedSlow,
                       transform $AnimSlightBounce ($AnimSpeedSlow + 100ms);
  opacity:             0; /* 2 */
  visibility:          hidden; /* 2 */
  transform:           translateY(0) translateX(0) translateZ(0); /* 2 */
  //@include BottomShadow($adjustBorders: true);

  &.c-popover__panel-isOpen {
    opacity:        1;
    visibility:     visible;
    pointer-events: auto;
  }

  .c-popover__panelArrow {
    position: absolute;
    width:    0;
    height:   0;

    // This fakes a border on the arrow.
    &:before {
      position: absolute;
      content:  '';
      height:   0;
      width:    0;
    }

    // This part of the arrow matches the panel.
    &:after {
      position: absolute;
      content:  '';
      height:   0;
      width:    0;
    }

    &.c-popover__panelArrow--top {
      &:before {
        bottom:       -$PopoverArrowSize + 1;
        border-left:  $PopoverArrowSize solid transparent;
        border-right: $PopoverArrowSize solid transparent;
        border-top:   $PopoverArrowSize solid $BorderColor;
      }

      &:after {
        bottom:       -$PopoverArrowSize + 2;
        border-left:  $PopoverArrowSize solid transparent;
        border-right: $PopoverArrowSize solid transparent;
        border-top:   $PopoverArrowSize solid $ColorEmptyShade;
      }
    }

    &.c-popover__panelArrow--right {
      &:before {
        left:          -$PopoverArrowSize;
        top:           50%;
        border-top:    $PopoverArrowSize solid transparent;
        border-bottom: $PopoverArrowSize solid transparent;
        border-right:  $PopoverArrowSize solid $BorderColor;
      }

      &:after {
        left:          -$PopoverArrowSize + 1;
        top:           50%;
        border-top:    $PopoverArrowSize solid transparent;
        border-bottom: $PopoverArrowSize solid transparent;
        border-right:  $PopoverArrowSize solid $ColorEmptyShade;
      }
    }

    &.c-popover__panelArrow--bottom {
      &:before {
        top:           -$PopoverArrowSize;
        border-left:   $PopoverArrowSize solid transparent;
        border-right:  $PopoverArrowSize solid transparent;
        border-bottom: $PopoverArrowSize solid $BorderColor;
      }

      &:after {
        top:           -$PopoverArrowSize + 1;
        border-left:   $PopoverArrowSize solid transparent;
        border-right:  $PopoverArrowSize solid transparent;
        border-bottom: $PopoverArrowSize solid $ColorEmptyShade;
      }
    }

    &.c-popover__panelArrow--left {
      &:before {
        right:         -$PopoverArrowSize + 1;
        top:           50%;
        border-top:    $PopoverArrowSize solid transparent;
        border-bottom: $PopoverArrowSize solid transparent;
        border-left:   $PopoverArrowSize solid $BorderColor;
      }

      &:after {
        right:         -$PopoverArrowSize + 2;
        top:           50%;
        border-top:    $PopoverArrowSize solid transparent;
        border-bottom: $PopoverArrowSize solid transparent;
        border-left:   $PopoverArrowSize solid $ColorEmptyShade;
      }
    }
  }


  &.c-popover__panel-noArrow .c-popover__panelArrow {
    display: none;
  }
}

.c-popover__panel.c-popover__panel-isOpen.c-popover__panel--top {
  transform: translateY($PopoverTranslateDistance) translateZ(0);
}

.c-popover__panel.c-popover__panel-isOpen.c-popover__panel--bottom {
  transform: translateY(-$PopoverTranslateDistance) translateZ(0);
}

.c-popover__panel.c-popover__panel-isOpen.c-popover__panel--left {
  transform: translateX($PopoverTranslateDistance) translateZ(0);
}

.c-popover__panel.c-popover__panel-isOpen.c-popover__panel--right {
  transform: translateX(-$PopoverTranslateDistance) translateZ(0);
}
