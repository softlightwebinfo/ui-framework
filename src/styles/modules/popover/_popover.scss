// Because of the animations and positioning involved, this code gets pretty
// repetitive. What you generally need to know if you work in here is that
// the positioning of the popovers (and the arrows attached to them)
// is handled through absolute positioning and then animated through the use
// of transforms.

.softPopover {
  display: inline-block;
  position: relative;
  vertical-align: middle;
  max-width: 100%;
}

.softPopover__anchor {
  display: inline-block;
}

/**
 * 1. Can expand further, but it looks weird if it's smaller than the originating button.
 * 2. Animation happens on the panel.
 * 3. Make sure the panel stays within the window.
 */
.softPopover__panel {
  // Ignore linting for legibility of transition property, and the mixin performs an overwrite
  // sass-lint:disable-block indentation, mixins-before-declarations
  position: absolute;
  z-index: $softZContentMenu;
  min-width: $softButtonMinWidth; /* 1 */
  max-width: calc(100vw - #{$softSizeXL}); /* 3 */
  backface-visibility: hidden;
  pointer-events: none;
  transition: /* 2 */
    opacity $softAnimSlightBounce $softAnimSpeedSlow,
    visibility $softAnimSlightBounce $softAnimSpeedSlow,
    transform $softAnimSlightBounce ($softAnimSpeedSlow + 100ms);
  opacity: 0; /* 2 */
  visibility: hidden; /* 2 */
  transform: translateY(0) translateX(0) translateZ(0); /* 2 */
  @include softBottomShadow($adjustBorders: true);

  &.softPopover__panel-isOpen {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
  }

  .softPopover__panelArrow {
    position: absolute;
    width: 0;
    height: 0;

    // This fakes a border on the arrow.
    &:before {
      position: absolute;
      content: '';
      height: 0;
      width: 0;
    }

    // This part of the arrow matches the panel.
    &:after {
      position: absolute;
      content: '';
      height: 0;
      width: 0;
    }

    &.softPopover__panelArrow--top {
      &:before {
        bottom: -$softPopoverArrowSize + 1;
        border-left: $softPopoverArrowSize solid transparent;
        border-right: $softPopoverArrowSize solid transparent;
        border-top: $softPopoverArrowSize solid $softBorderColor;
      }

      &:after {
        bottom: -$softPopoverArrowSize + 2;
        border-left: $softPopoverArrowSize solid transparent;
        border-right: $softPopoverArrowSize solid transparent;
        border-top: $softPopoverArrowSize solid $softColorEmptyShade;
      }
    }

    &.softPopover__panelArrow--right {
      &:before {
        left: -$softPopoverArrowSize;
        top: 50%;
        border-top: $softPopoverArrowSize solid transparent;
        border-bottom: $softPopoverArrowSize solid transparent;
        border-right: $softPopoverArrowSize solid $softBorderColor;
      }

      &:after {
        left: -$softPopoverArrowSize + 1;
        top: 50%;
        border-top: $softPopoverArrowSize solid transparent;
        border-bottom: $softPopoverArrowSize solid transparent;
        border-right: $softPopoverArrowSize solid $softColorEmptyShade;
      }
    }

    &.softPopover__panelArrow--bottom {
      &:before {
        top: -$softPopoverArrowSize;
        border-left: $softPopoverArrowSize solid transparent;
        border-right: $softPopoverArrowSize solid transparent;
        border-bottom: $softPopoverArrowSize solid $softBorderColor;
      }

      &:after {
        top: -$softPopoverArrowSize + 1;
        border-left: $softPopoverArrowSize solid transparent;
        border-right: $softPopoverArrowSize solid transparent;
        border-bottom: $softPopoverArrowSize solid $softColorEmptyShade;
      }
    }

    &.softPopover__panelArrow--left {
      &:before {
        right: -$softPopoverArrowSize + 1;
        top: 50%;
        border-top: $softPopoverArrowSize solid transparent;
        border-bottom: $softPopoverArrowSize solid transparent;
        border-left: $softPopoverArrowSize solid $softBorderColor;
      }

      &:after {
        right: -$softPopoverArrowSize + 2;
        top: 50%;
        border-top: $softPopoverArrowSize solid transparent;
        border-bottom: $softPopoverArrowSize solid transparent;
        border-left: $softPopoverArrowSize solid $softColorEmptyShade;
      }
    }
  }


  &.softPopover__panel-noArrow .softPopover__panelArrow {
    display: none;
  }
}

.softPopover__panel.softPopover__panel-isOpen.softPopover__panel--top {
  transform: translateY($softPopoverTranslateDistance) translateZ(0);
}

.softPopover__panel.softPopover__panel-isOpen.softPopover__panel--bottom {
  transform: translateY(-$softPopoverTranslateDistance) translateZ(0);
}

.softPopover__panel.softPopover__panel-isOpen.softPopover__panel--left {
  transform: translateX($softPopoverTranslateDistance) translateZ(0);
}

.softPopover__panel.softPopover__panel-isOpen.softPopover__panel--right {
  transform: translateX(-$softPopoverTranslateDistance) translateZ(0);
}
